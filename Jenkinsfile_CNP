#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "et"
def component = "cos"
def branchesToSync = ['demo', 'perftest']

def secrets = [
        'et-cos-${env}': [
                secret('ccd-user-email', 'CCD_CASEWORKER_E2E_EMAIL'),
                secret('ccd-user-password', 'CCD_CASEWORKER_E2E_PASSWORD'),
                secret('et-caseworker-email', 'ET_CASEWORKER_EMAIL'),
                secret('et-caseworker-pwd', 'ET_CASEWORKER_PASSWORD'),
                secret('et-judge-email', 'ET_JUDGE_EMAIL'),
                secret('et-judge-pwd', 'ET_JUDGE_PASSWORD'),
                secret('et-cos-s2s-secret', 'SERVICE_SECRET'),
                secret('idam-client-secret', 'IDAM_CLIENT_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  onMaster {
    disableLegacyDeployment()
  }
  onDemo {
    disableLegacyDeployment()
  }
  onIthc {
    disableLegacyDeployment()
  }
  onPerftest {
    disableLegacyDeployment()
  }
  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onPR() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  syncBranchesWithMaster(branchesToSync)
  enableSlackNotifications('#et-builds')

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E smoke tests result"
    ]
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E functional tests result"
    ]
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E smoke tests result"
    ]
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E functional tests result"
    ]
  }
}
