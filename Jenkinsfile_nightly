#!groovy

properties([
        pipelineTriggers([cron('H 8 * * 1-5')]),
        parameters([
                string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
                string(name: 'URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
                string(name: 'SecurityRules',
                        defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),
        ])
])

@Library("Infrastructure")

def type = "java"
def product = "et"
def component = "cos"

def secrets = [
        "et-cos-${params.ENVIRONMENT}": [
                secret('et-ccd-caseworker-user-name', 'ET_CCD_CASEWORKER_USER_NAME'),
                secret('et-ccd-caseworker-password', 'ET_CCD_CASEWORKER_PASSWORD'),
                secret('et-ccd-api-user-name', 'ET_CCD_API_USER_NAME'),
                secret('et-ccd-api-password', 'ET_CCD_API_PASSWORD'),
                secret('et-caseworker-username', 'ET_CASEWORKER_USER_NAME'),
                secret('et-caseworker-password', 'ET_CASEWORKER_PASSWORD'),
                secret('et-judge-4-username', 'ET_JUDGE_4_USER_NAME'),
                secret('et-judge-4-password', 'ET_JUDGE_4_PASSWORD'),
                secret('idam-client-secret', 'IDAM_CLIENT_SECRET'),
                secret('et-cos-s2s-secret', 'ET_COS_S2S_SECRET'),
                secret('cos-system-user', 'ET_COS_SYSTEM_USER'),
                secret('cos-system-user-password', 'ET_COS_SYSTEM_USER_PASSWORD')
        ],
        "s2s-${params.ENVIRONMENT}":  [
                secret('microservicekey-ccd-gw', 'MICROSERVICE_CCD_GW')
        ]
]

def inTestTrue = [
    'et-${env}': [
        secret('true', 'IN_TEST')
    ]
]

def inTestFalse = [
    'et-${env}': [
        secret('', 'IN_TEST')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.TEST_E2E_URL = params.URL_TO_TEST
    env.RUNNING_ENV = params.ENVIRONMENT

    loadVaultSecrets(secrets)
    enableFortifyScan()


    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

}
