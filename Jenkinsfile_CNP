#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "et"
def component = "cos"
def branchesToSync = ['demo', 'perftest', 'ithc']

def secrets = [
        'et-cos-${env}': [
                secret('ccd-import-username', 'CCD_IMPORT_USERNAME'),
                secret('ccd-import-password', 'CCD_IMPORT_PASSWORD'),
                secret('et-ccd-caseworker-user-name', 'ET_CCD_CASEWORKER_USER_NAME'),
                secret('et-ccd-caseworker-password', 'ET_CCD_CASEWORKER_PASSWORD'),
                secret('et-ccd-api-user-name', 'ET_CCD_API_USER_NAME'),
                secret('et-ccd-api-password', 'ET_CCD_API_PASSWORD'),
                secret('et-caseworker-username', 'ET_CASEWORKER_USER_NAME'),
                secret('et-caseworker-password', 'ET_CASEWORKER_PASSWORD'),
                secret('et-judge-4-username', 'ET_JUDGE_4_USER_NAME'),
                secret('et-judge-4-password', 'ET_JUDGE_4_PASSWORD'),
                secret('idam-client-secret', 'IDAM_CLIENT_SECRET')
        ],
        's2s-${env}'      : [
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
                secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('idam-data-store-system-user-password', 'IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('idam-data-store-system-user-username', 'IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-client-secret', 'IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  onMaster {
    disableLegacyDeployment()
  }
  onDemo {
    disableLegacyDeployment()
  }
  onIthc {
    disableLegacyDeployment()
  }
  onPerftest {
    disableLegacyDeployment()
  }
  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onPR() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  syncBranchesWithMaster(branchesToSync)
  enableSlackNotifications('#et-builds')

  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/integration/index.html'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "integration",
            reportFiles : "index.html",
            reportName : "Integration test report"
    ]
  }

  before('smoketest:preview') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.ET_COS_URL = "https://et-cos-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.FT_SYA_URL = "http://et-sya-api-aat.service.core-compute-aat.internal"

    sh """
      eval \$(./bin/preview/load-preview-environment-variables.sh ${CHANGE_ID})
      ./bin/preview/add-roles.sh
      ./bin/preview/pull-ccd-definitions.sh
    """

  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E Smoke test report"
    ]
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "ET-CCD-Callbacks-tests.html",
            reportName : "ET E2E test report"
    ]
  }

  before('smoketest:aat') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.ET_COS_URL = "https://et-cos-staging.aat.platform.hmcts.net/"
    env.FT_SYA_URL = "http://et-sya-api-aat.service.core-compute-aat.internal"
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "et-e2e-result.html",
            reportName : "ET E2E Smoke test report"
    ]
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'

    publishHTML target: [
            allowMissing : true,
            alwaysLinkToLastBuild: true,
            keepAll : true,
            reportDir : "functional-output",
            reportFiles : "ET-CCD-Callbacks-tests.html",
            reportName : "ET E2E test report"
    ]
  }
}
