{
	// Place your et-ccd-callbacks workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Controller Test - File": {
		"scope": "java",
		"body": [
			"package uk.gov.hmcts.ethos.replacement.docmosis.controllers;",
			"",
			"import org.junit.jupiter.api.BeforeEach;",
			"import org.junit.jupiter.api.Test;",
			"import org.junit.jupiter.api.extension.ExtendWith;",
			"import org.springframework.beans.factory.annotation.Autowired;",
			"import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;",
			"import org.springframework.boot.test.mock.mockito.MockBean;",
			"import org.springframework.http.MediaType;",
			"import org.springframework.test.context.junit.jupiter.SpringExtension;",
			"import org.springframework.test.web.servlet.MockMvc;",
			"import uk.gov.hmcts.et.common.model.ccd.CCDRequest;",
			"import uk.gov.hmcts.et.common.model.ccd.CaseDetails;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.service.VerifyTokenService;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.utils.CCDRequestBuilder;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.utils.CaseDataBuilder;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.utils.JsonMapper;",
			"",
			"import static org.hamcrest.Matchers.notNullValue;",
			"import static org.hamcrest.Matchers.nullValue;",
			"import static org.mockito.Mockito.when;",
			"import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;",
			"import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;",
			"import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;",
			"import static uk.gov.hmcts.ecm.common.model.helper.Constants.ENGLANDWALES_CASE_TYPE_ID;",
			"",
			"@ExtendWith(SpringExtension.class)",
			"@WebMvcTest({${1:ControllerName}Controller.class, JsonMapper.class})",
			"public class ${1:ControllerName}ControllerTest {",
			"",
			"    private static final String AUTH_TOKEN = \"Bearer eyJhbGJbpjciOiJIUzI1NiJ9\";",
			"    private static final String ABOUT_TO_SUBMIT_URL = \"/${1/(.)(.*)/${1:/downcase}$2/}/aboutToSubmit\";",
			"    ",
			"    @MockBean",
			"    private VerifyTokenService verifyTokenService;",
			"    /* Mocked deps go here, for example",
			"    @MockBean",
			"    private EmailService emailService;",
			"    */",
			"    @Autowired",
			"    private MockMvc mockMvc;",
			"    @Autowired",
			"    private JsonMapper jsonMapper;",
			"    private CCDRequest ccdRequest;",
			"",
			"    @BeforeEach",
			"    void setUp() throws Exception {",
			"        CaseDetails caseDetails = CaseDataBuilder.builder()",
			"            .buildAsCaseDetails(ENGLANDWALES_CASE_TYPE_ID);",
			"",
			"        caseDetails.getCaseData().setEthosCaseReference(\"1234\")",
			"",
			"        ccdRequest = CCDRequestBuilder.builder()",
			"            .withCaseData(caseDetails.getCaseData())",
			"            .build();",
			"    }",
			"",
			"    @Test",
			"    void aboutToStart_tokenOk() throws Exception {",
			"        when(verifyTokenService.verifyTokenSignature(AUTH_TOKEN)).thenReturn(true);",
			"        mockMvc.perform(post(ABOUT_TO_SUBMIT_URL)",
			"                .content(jsonMapper.toJson(ccdRequest))",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isOk())",
			"            .andExpect(jsonPath(\"$.data\", notNullValue()))",
			"            .andExpect(jsonPath(\"$.errors\", nullValue()))",
			"            .andExpect(jsonPath(\"$.warnings\", nullValue()));",
			"    }",
			"",
			"    @Test",
			"    void aboutToStart_tokenFail() throws Exception {",
			"        when(verifyTokenService.verifyTokenSignature(AUTH_TOKEN)).thenReturn(false);",
			"        mockMvc.perform(post(ABOUT_TO_SUBMIT_URL)",
			"                .content(jsonMapper.toJson(ccdRequest))",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isForbidden());",
			"    }",
			"",
			"    @Test",
			"    void aboutToStart_badRequest() throws Exception {",
			"        mockMvc.perform(post(ABOUT_TO_SUBMIT_URL)",
			"                .content(\"garbage content\")",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isBadRequest());",
			"    }",
			"    ",
			"}",
			"",
		]
	},
	"Controller Test - MockBean": {
		"body": [
			"@MockBean",
			"private ${1:ServiceName} ${1/(.)(.*)/${1:/downcase}$2/};",
		]
	},
	"Controller Test - Add Route": {
		"body": [
			"    private static final String ${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm}_URL = \"/${2:routePath}/${1:callbackName}\";",
			"    @Test",
			"    void ${1:callbackName}_tokenOk() throws Exception {",
			"        when(verifyTokenService.verifyTokenSignature(AUTH_TOKEN)).thenReturn(true);",
			"        mockMvc.perform(post(${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm}_URL)",
			"                .content(jsonMapper.toJson(ccdRequest))",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isOk())",
			"            .andExpect(jsonPath(\"$.data\", notNullValue()))",
			"            .andExpect(jsonPath(\"$.errors\", nullValue()))",
			"            .andExpect(jsonPath(\"$.warnings\", nullValue()));",
			"    }",
			"",
			"    @Test",
			"    void ${1:callbackName}_tokenFail() throws Exception {",
			"        when(verifyTokenService.verifyTokenSignature(AUTH_TOKEN)).thenReturn(false);",
			"        mockMvc.perform(post(${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm}_URL)",
			"                .content(jsonMapper.toJson(ccdRequest))",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isForbidden());",
			"    }",
			"",
			"    @Test",
			"    void ${1:callbackName}_badRequest() throws Exception {",
			"        mockMvc.perform(post(${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm}_URL)",
			"                .content(\"garbage content\")",
			"                .header(\"Authorization\", AUTH_TOKEN)",
			"                .contentType(MediaType.APPLICATION_JSON))",
			"            .andExpect(status().isBadRequest());",
			"    }",
			"    ",
			""
		]
	},
	"Helper Test - File": {
		"body": [
			"package uk.gov.hmcts.ethos.replacement.docmosis.helpers;",
			"",
			"import org.junit.Before;",
			"import org.junit.Test;",
			"import uk.gov.hmcts.et.common.model.ccd.CCDRequest;",
			"import uk.gov.hmcts.et.common.model.ccd.CaseData;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.utils.CCDRequestBuilder;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.utils.CaseDataBuilder;",
			"",
			"import static org.hamcrest.core.Is.is;",
			"import static org.hamcrest.MatcherAssert.assertThat;",
			"import static org.junit.Assert.assertFalse;",
			"import static org.junit.Assert.assertTrue;",
			"",
			"public class ${1:HelperClassName}Test {",
			"    CCDRequest ccdRequest;",
			"    CaseData caseData;",
			"",
			"    @Before",
			"    public void setUp() {",
			"        caseData = CaseDataBuilder.builder()",
			"            .withClaimantIndType(\"First\", \"Last\")",
			"            .withEthosCaseReference(\"1234\")",
			"            .build();",
			"",
			"        caseData.setClaimant(\"First Last\");",
			"",
			"        ccdRequest = CCDRequestBuilder.builder()",
			"            .withState(\"Accepted\")",
			"            .withCaseId(\"1234\")",
			"            .withCaseData(caseData)",
			"            .build();",
			"    }",
			"",
			"    @Test",
			"    public void methodUnderTest_givenInput_returnsOrDoesSomething() {",
			"        var expected = 1;",
			"        var actual = 2;",
			"        ",
			"        assertThat(actual, is(expected));",
			"    }",
			"}",
			""
		],
		"description": "Helper Test File"
	},
	"Helper Test - Single Test": {
		"body": [
			"@Test",
			"public void ${1:methodUnderTest}_${2:givenInput}_${3:returnsOrDoesSomething}() {",
			"    var expected = 1;",
			"    var actual = 2;",
			"    ",
			"    assertThat(actual, is(expected));",
			"}"
		],
		"description": "Helper Test File"
	},
	"Controller Code - Add Endpoint": {
		"prefix": "controllerEndpoint",
		"body": [
			"     /**",
			"     * ${1:JavaDocs}.",
			"     *",
			"     * @param ccdRequest holds the request and case data",
			"     * @param userToken  used for authorization",
			"     * @return Callback response entity with case data attached.",
			"     */",
			"    @PostMapping(value = \"/${2:url}\", consumes = APPLICATION_JSON_VALUE)",
			"    @Operation(summary = \"${3:endpointDescription}\")",
			"    @ApiResponses(value = {",
			"        @ApiResponse(responseCode = \"200\", description = \"Accessed successfully\",",
			"            content = {",
			"                @Content(mediaType = \"application/json\",",
			"                    schema = @Schema(implementation = CCDCallbackResponse.class))",
			"            }),",
			"        @ApiResponse(responseCode = \"400\", description = \"Bad Request\"),",
			"        @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")",
			"    })",
			"    public ResponseEntity<CCDCallbackResponse> ${4:methodName}(",
			"        @RequestBody CCDRequest ccdRequest,",
			"        @RequestHeader(value = \"Authorization\") String userToken) {",
			"",
			"        if (!verifyTokenService.verifyTokenSignature(userToken)) {",
			"            log.error(INVALID_TOKEN, userToken);",
			"            return ResponseEntity.status(FORBIDDEN.value()).build();",
			"        }",
			"",
			"        CaseData caseData = ccdRequest.getCaseDetails().getCaseData();",
			"        // Code here",
			"        return getCallbackRespEntityNoErrors(caseData);",
			"    }"
		],
		"description": "Controller Code - Add Endpoint"
	},
	"Controller Code - File": {
		"prefix": "",
		"body": [
			"package uk.gov.hmcts.ethos.replacement.docmosis.controllers;",
			"",
			"import io.swagger.v3.oas.annotations.Operation;",
			"import io.swagger.v3.oas.annotations.media.Content;",
			"import io.swagger.v3.oas.annotations.media.Schema;",
			"import io.swagger.v3.oas.annotations.responses.ApiResponse;",
			"import io.swagger.v3.oas.annotations.responses.ApiResponses;",
			"import lombok.RequiredArgsConstructor;",
			"import lombok.extern.slf4j.Slf4j;",
			"import org.springframework.http.ResponseEntity;",
			"import org.springframework.web.bind.annotation.PostMapping;",
			"import org.springframework.web.bind.annotation.RequestBody;",
			"import org.springframework.web.bind.annotation.RequestHeader;",
			"import org.springframework.web.bind.annotation.RequestMapping;",
			"import org.springframework.web.bind.annotation.RestController;",
			"import uk.gov.hmcts.et.common.model.ccd.CCDCallbackResponse;",
			"import uk.gov.hmcts.et.common.model.ccd.CCDRequest;",
			"import uk.gov.hmcts.et.common.model.ccd.CaseData;",
			"import uk.gov.hmcts.ethos.replacement.docmosis.service.VerifyTokenService;",
			"",
			"import static org.springframework.http.HttpStatus.FORBIDDEN;",
			"import static org.springframework.util.MimeTypeUtils.APPLICATION_JSON_VALUE;",
			"import static uk.gov.hmcts.ethos.replacement.docmosis.helpers.CallbackRespHelper.getCallbackRespEntityNoErrors;",
			"",
			"/**",
			" * REST controller for the ${1:EVENT} event.",
			" */",
			"@Slf4j",
			"@RequestMapping(\"/${2:path}\")",
			"@RestController",
			"@RequiredArgsConstructor",
			"public class ${3:Event}Controller {",
			"",
			"    private static final String INVALID_TOKEN = \"Invalid Token {}\";",
			"    private final VerifyTokenService verifyTokenService;",
			"}"
		],
		"description": ""
	}
}